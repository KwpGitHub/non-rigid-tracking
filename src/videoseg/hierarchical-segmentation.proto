import "region.proto";

package videoseg;

// Each spatio-temporal region is represented as a set of 2D frame-slices (Region2D),
// associated by a unique id that is given to each region. Therefore, there
// exists one SegmentationDesc for each frame in the original video.
// 2D Regions are saved similar to polygon rasterization or RLE, as set of
// scanlines and the corresponding scanline intervals.
// As the hierarchy of regions (super-regions, i.e. regions composed of regions)
// is computed for the whole video volume, it would be redundant to store it at
// every frame, it is therefore only saved for the very first frame, for all
// subsequent SegmentationDesc::hierarchy is empty.

// Note, all Region2D's ids, Region3D's ids, neighbor ids and children
// ids are ALWAYS sorted for fast access, when returned by any part of the algorithm.
// If you modify the tree structure by yourself, make sure that this property is
// retained.

// Hierarchical video segmentation.
message SegmentationDesc {
  message Region2D {
    required int32 id = 1;
    optional Rasterization raster = 3;
    optional ShapeMoments shape_moments = 5;
  }

  message ShapeMoments {
    optional float size = 1;
    optional float mean_x = 2;
    optional float mean_y = 3;
    optional float moment_xx = 4;
    optional float moment_xy = 5;
    optional float moment_yy = 6;
  }

  message CompoundRegion {
    required int32 id = 1;
    required int32 size = 2;
    repeated int32 neighbor_id = 3;
    optional int32 parent_id = 4 [default = -1];

    // List of child ids - references to previous level.
    // Empty for leafs (oversegmentation).
    repeated int32 child_id = 5;

    // Begin and end in time of this Region3D.
    optional int32 start_frame = 6;
    optional int32 end_frame = 7;
  }

  message HierarchyLevel {
    repeated CompoundRegion region = 2;
  }

  repeated Region2D region = 2;

  // Always present at the first frame of a chunk-set.
  repeated HierarchyLevel hierarchy = 3;

  // General video information.
  optional int32 frame_width = 4 [default = 0];
  optional int32 frame_height = 5 [default = 0];

  // Number of frames in this chunk, i.e. number of frames
  // hierarchy was computed for.
  optional int32 chunk_size = 6;
  // First frame in overlap. Although we compute hierarchy for
  // the whole chunk, the Region2D for the overlap
  // are not output by this but by the next chunk.
  optional int32 overlap_start = 7;

  optional int32 chunk_id = 8 [default = -1];

  // Corresponding hierarchy frame, first one by default.
  optional int32 hierarchy_frame_idx = 9 [default = 0];

  // Optional Descriptors for oversegmented regions.
  message AppearanceDescriptor {
    message ColorEntry {
      required int32 idx = 1;
      required float value = 2;
    }

    required int32 luminance_bins = 1;
    required int32 color_bins = 2;
    repeated ColorEntry color_entry = 3;
  }

  message FlowDescriptor {
    // Dense Vector Histogram.
    repeated float vector_entry = 1;
  }


  message TextureDescriptor {
    repeated float lbp_entry = 1;
  }

  message MatchDescriptor {
    message MatchTuple {
      required int32 match_id = 1;
      optional float strength = 2;
    }
    repeated MatchTuple tuple = 1;
  }

  message AggregatedDescriptor {
    required fixed32 id = 1;       // corresponding region id.
    optional AppearanceDescriptor appearance = 2;
    optional FlowDescriptor flow = 3;
    repeated TextureDescriptor texture = 4;
    optional MatchDescriptor match = 5;
  }

  // This might be only present in some protobuffers as it is saved for spatio
  // temporal descriptors.
  repeated AggregatedDescriptor descriptors = 10;
}

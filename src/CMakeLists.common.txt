SET(CMAKE_CXX_FLAGS "-Wall")

ADD_EXECUTABLE(visualize-keypoints
  visualize_keypoints.cpp
  read_image.cpp
  sift_position.cpp
  sift_position_reader.cpp
  draw_sift_position.cpp
  random_color.cpp
  hsv.cpp)
TARGET_LINK_LIBRARIES(visualize-keypoints glog gflags)
TARGET_LINK_LIBRARIES(visualize-keypoints ${OpenCV_LIBS})

ADD_EXECUTABLE(match-features
  match_features.cpp
  descriptor.cpp
  classifier.cpp
  find_matches.cpp
  find_unique_matches.cpp
  find_matches_util.cpp
  match.cpp
  match_result.cpp
  unique_match_result.cpp
  descriptor_reader.cpp
  unique_match_result_writer.cpp
  match_result_writer.cpp)
TARGET_LINK_LIBRARIES(match-features glog gflags)
TARGET_LINK_LIBRARIES(match-features ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-matches
  visualize_matches.cpp
  read_image.cpp
  match.cpp
  draw_matches.cpp
  sift_position.cpp
  random_color.cpp
  hsv.cpp
  match_reader.cpp
  draw_sift_position.cpp
  sift_position_reader.cpp)
TARGET_LINK_LIBRARIES(visualize-matches glog gflags)
TARGET_LINK_LIBRARIES(visualize-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(adjacent-matches-to-tracks
  adjacent_matches_to_tracks.cpp
  read_image.cpp
  sift_position.cpp
  match.cpp
  match_reader.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(adjacent-matches-to-tracks glog gflags)
TARGET_LINK_LIBRARIES(adjacent-matches-to-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(track-features-bidir
  track_features_bidir.cpp
  read_image.cpp
  flow.cpp
  warp.cpp
  util.cpp
  similarity_warper.cpp
  similarity_warp.cpp
  sift_position.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp
  random_color.cpp
  hsv.cpp)
TARGET_LINK_LIBRARIES(track-features-bidir glog gflags)
TARGET_LINK_LIBRARIES(track-features-bidir ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(track-features-bidir ceres)
TARGET_LINK_LIBRARIES(track-features-bidir cxsparse)
TARGET_LINK_LIBRARIES(track-features-bidir cholmod ccolamd camd colamd amd)
TARGET_LINK_LIBRARIES(track-features-bidir ${LAPACK_LIB})

ADD_EXECUTABLE(extract-sift-tracks
  extract_sift_tracks.cpp
  read_image.cpp
  sift_position.cpp
  extract_sift.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp
  descriptor_writer.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(extract-sift-tracks glog gflags)
TARGET_LINK_LIBRARIES(extract-sift-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(extract-sift-test
  extract_sift_test.cpp
  read_image.cpp
  sift_feature.cpp
  sift_position.cpp
  detect_sift.cpp
  extract_sift.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(extract-sift-test glog gflags)
TARGET_LINK_LIBRARIES(extract-sift-test ${OpenCV_LIBS})

ADD_EXECUTABLE(pca-descriptor
  pca_descriptor.cpp
  random_color.cpp
  hsv.cpp
  descriptor_reader.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(pca-descriptor glog gflags)
TARGET_LINK_LIBRARIES(pca-descriptor ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-tracks
  visualize_tracks.cpp
  sift_position.cpp
  scale_space_position.cpp
  draw_sift_position.cpp
  sift_feature_drawer.cpp
  translation_feature_drawer.cpp
  scale_space_feature_drawer.cpp
  read_image.cpp
  random_color.cpp
  hsv.cpp
  sift_position_reader.cpp
  scale_space_position_reader.cpp)
TARGET_LINK_LIBRARIES(visualize-tracks glog gflags)
TARGET_LINK_LIBRARIES(visualize-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(merge-tracks
  merge_tracks.cpp
  sift_position.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(merge-tracks glog gflags)
TARGET_LINK_LIBRARIES(merge-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(select-active-tracks
  select_active_tracks.cpp
  sift_position.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(select-active-tracks glog gflags)
TARGET_LINK_LIBRARIES(select-active-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(effect-of-sift-threshold
  effect_of_sift_threshold.cpp
  match.cpp
  descriptor.cpp
  descriptor_reader.cpp)
TARGET_LINK_LIBRARIES(effect-of-sift-threshold glog gflags)
TARGET_LINK_LIBRARIES(effect-of-sift-threshold ${OpenCV_LIBS})

ADD_EXECUTABLE(find-keypoints
  find_keypoints.cpp
  read_image.cpp
  detect_sift.cpp
  sift_position.cpp
  sift_feature.cpp
  sift_feature_writer.cpp
  sift_position_writer.cpp
  descriptor_writer.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(find-keypoints glog gflags)
TARGET_LINK_LIBRARIES(find-keypoints ${OpenCV_LIBS})

ADD_EXECUTABLE(optimal-triangulation-test
    optimal_triangulation_test.cpp
    optimal_triangulation.cpp
    roots.cpp
    geometry.cpp)
TARGET_LINK_LIBRARIES(optimal-triangulation-test glog gflags)
TARGET_LINK_LIBRARIES(optimal-triangulation-test ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(optimal-triangulation-test gsl ${LAPACK_LIB})

ADD_EXECUTABLE(evaluate-matches
    evaluate_matches.cpp
    match.cpp
    match_reader.cpp
    matrix_reader.cpp
    optimal_triangulation.cpp
    roots.cpp)
TARGET_LINK_LIBRARIES(evaluate-matches glog gflags)
TARGET_LINK_LIBRARIES(evaluate-matches ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(evaluate-matches gsl ${LAPACK_LIB})

ADD_EXECUTABLE(undistort-image
    undistort_image.cpp
    camera_properties.cpp
    axis_aligned_ellipse.cpp
    camera_properties_reader.cpp
    matrix_reader.cpp
    distortion.cpp
    read_image.cpp)
TARGET_LINK_LIBRARIES(undistort-image glog gflags)
TARGET_LINK_LIBRARIES(undistort-image ${OpenCV_LIBS})

ADD_EXECUTABLE(undistort-points
    undistort_points.cpp
    camera_properties.cpp
    axis_aligned_ellipse.cpp
    camera_properties_reader.cpp
    matrix_reader.cpp
    distortion.cpp)
TARGET_LINK_LIBRARIES(undistort-points glog gflags)
TARGET_LINK_LIBRARIES(undistort-points ${OpenCV_LIBS})

ADD_EXECUTABLE(cameras-to-fund-mat
    cameras_to_fund_mat.cpp
    camera_pose.cpp
    camera_pose_reader.cpp
    world_point_reader.cpp
    camera_properties.cpp
    axis_aligned_ellipse.cpp
    distortion.cpp
    camera_properties_reader.cpp
    matrix_reader.cpp
    geometry.cpp
    matrix_writer.cpp)
TARGET_LINK_LIBRARIES(cameras-to-fund-mat glog gflags)
TARGET_LINK_LIBRARIES(cameras-to-fund-mat ${OpenCV_LIBS})

ADD_EXECUTABLE(effect-of-matching-parameters
  effect_of_matching_parameters.cpp
  read_lines.cpp
  stats.cpp)
TARGET_LINK_LIBRARIES(effect-of-matching-parameters glog gflags)
TARGET_LINK_LIBRARIES(effect-of-matching-parameters ${OpenCV_LIBS})

ADD_EXECUTABLE(select-long-tracks
  select_long_tracks.cpp
  sift_position.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(select-long-tracks glog gflags)
TARGET_LINK_LIBRARIES(select-long-tracks ${OpenCV_LIBS})

#ADD_EXECUTABLE(match-tracks-using-mean
#  match_tracks_using_mean.cpp
#  descriptor.cpp
#  find_matches.cpp
#  descriptor_reader.cpp
#  match_result_writer.cpp)
#TARGET_LINK_LIBRARIES(match-tracks-using-mean glog gflags)
#TARGET_LINK_LIBRARIES(match-tracks-using-mean ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-multiview-tracks
  visualize_multiview_tracks.cpp
  read_lines.cpp
  image_index.cpp
  random_color.cpp
  hsv.cpp
  scale_space_position.cpp
  draw_scale_space_position.cpp
  scale_space_position_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(visualize-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(visualize-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(select-distinctive-matches
  select_distinctive_matches.cpp
  unique_match_result.cpp
  match_result.cpp
  unique_match_result_reader.cpp
  unique_match_result_writer.cpp)
TARGET_LINK_LIBRARIES(select-distinctive-matches glog gflags)
TARGET_LINK_LIBRARIES(select-distinctive-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(track-matches-to-multiview-tracks
  track_matches_to_multiview_tracks.cpp
  match.cpp
  scale_space_position.cpp
  image_index.cpp
  match_reader.cpp
  scale_space_position_reader.cpp
  scale_space_position_writer.cpp)
TARGET_LINK_LIBRARIES(track-matches-to-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(track-matches-to-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(merge-multiview-tracks
  merge_multiview_tracks.cpp
  sift_position.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp
  image_index.cpp)
TARGET_LINK_LIBRARIES(merge-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(merge-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(select-active-multiview-tracks
  select_active_multiview_tracks.cpp
  sift_position.cpp
  image_index.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(select-active-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(select-active-multiview-tracks ${OpenCV_LIBS})

#ADD_EXECUTABLE(match-tracks-using-min
#  match_tracks_using_min.cpp
#  descriptor.cpp
#  find_matches.cpp
#  descriptor_reader.cpp
#  match_result_writer.cpp)
#TARGET_LINK_LIBRARIES(match-tracks-using-min glog gflags)
#TARGET_LINK_LIBRARIES(match-tracks-using-min ${OpenCV_LIBS})

ADD_EXECUTABLE(multiview-index-tracks-to-features
  multiview_index_tracks_to_features.cpp
  image_index.cpp
  sift_position.cpp
  read_lines.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(multiview-index-tracks-to-features glog gflags)
TARGET_LINK_LIBRARIES(multiview-index-tracks-to-features ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-multiview-multitracks
  visualize_multiview_multitracks.cpp
  read_lines.cpp
  image_index.cpp
  random_color.cpp
  hsv.cpp
  sift_position.cpp
  draw_sift_position.cpp
  sift_position_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(visualize-multiview-multitracks glog gflags)
TARGET_LINK_LIBRARIES(visualize-multiview-multitracks ${OpenCV_LIBS})

ADD_EXECUTABLE(find-max-cliques
  find_max_cliques.cpp
  read_lines.cpp
  match.cpp
  sift_feature.cpp
  sift_position.cpp
  descriptor.cpp
  image_index.cpp
  match_reader.cpp
  sift_feature_reader.cpp
  descriptor_reader.cpp
  sift_position_reader.cpp
  sift_feature_writer.cpp
  descriptor_writer.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(find-max-cliques glog gflags)
TARGET_LINK_LIBRARIES(find-max-cliques ${OpenCV_LIBS})

ADD_EXECUTABLE(partition-graph
  partition_graph.cpp
  read_lines.cpp
  match.cpp
  sift_feature.cpp
  sift_position.cpp
  descriptor.cpp
  image_index.cpp
  feature_index.cpp
  match_reader.cpp
  sift_feature_reader.cpp
  descriptor_reader.cpp
  sift_position_reader.cpp
  sift_feature_writer.cpp
  descriptor_writer.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(partition-graph glog gflags)
TARGET_LINK_LIBRARIES(partition-graph ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-multiview-multitracks-time-slice
  visualize_multiview_multitracks_time_slice.cpp
  read_lines.cpp
  image_index.cpp
  random_color.cpp
  hsv.cpp
  sift_position.cpp
  draw_sift_position.cpp
  sift_position_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(visualize-multiview-multitracks-time-slice glog gflags)
TARGET_LINK_LIBRARIES(visualize-multiview-multitracks-time-slice ${OpenCV_LIBS})

ADD_EXECUTABLE(cluster-descriptors
  cluster_descriptors.cpp
  kmeans.cpp
  random.cpp
  image_index.cpp
  sift_feature.cpp
  sift_position.cpp
  descriptor.cpp
  read_lines.cpp
  sift_feature_reader.cpp
  sift_position_reader.cpp
  descriptor_reader.cpp)
TARGET_LINK_LIBRARIES(cluster-descriptors glog gflags)
TARGET_LINK_LIBRARIES(cluster-descriptors ${OpenCV_LIBS})

ADD_EXECUTABLE(sparse-mat-unittest
  sparse_mat_unittest.cpp
  sparse_mat.cpp)
TARGET_LINK_LIBRARIES(sparse-mat-unittest gtest_main gtest gflags glog)
TARGET_LINK_LIBRARIES(sparse-mat-unittest ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-some-multiview-tracks
  visualize_some_multiview_tracks.cpp
  random.cpp
  image_index.cpp
  random_color.cpp
  hsv.cpp
  sift_position.cpp
  draw_sift_position.cpp
  read_lines.cpp
  sift_position_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(visualize-some-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(visualize-some-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(select-rigid-matches
    select_rigid_matches.cpp
    optimal_triangulation.cpp
    roots.cpp
    match_result.cpp
    match_result_reader.cpp
    matrix_reader.cpp
    match_result_writer.cpp)
TARGET_LINK_LIBRARIES(select-rigid-matches glog gflags)
TARGET_LINK_LIBRARIES(select-rigid-matches ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(select-rigid-matches gsl ${LAPACK_LIB})

ADD_EXECUTABLE(select-tracked-matches
    select_tracked_matches.cpp
    sift_position.cpp
    match_result.cpp
    match_result_reader.cpp
    sift_position_reader.cpp
    match_result_writer.cpp)
TARGET_LINK_LIBRARIES(select-tracked-matches glog gflags)
TARGET_LINK_LIBRARIES(select-tracked-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(matches-to-multiview-tracks
  matches_to_multiview_tracks.cpp
  read_lines.cpp
  match.cpp
  sift_feature.cpp
  sift_position.cpp
  descriptor.cpp
  image_index.cpp
  match_reader.cpp
  feature_index.cpp
  sift_feature_reader.cpp
  descriptor_reader.cpp
  sift_position_reader.cpp
  sift_feature_writer.cpp
  descriptor_writer.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(matches-to-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(matches-to-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(agglomerative-cluster
  agglomerative_cluster.cpp
  read_lines.cpp
  sift_feature.cpp
  sift_position.cpp
  descriptor.cpp
  match_result.cpp
  image_index.cpp
  feature_index.cpp
  camera.cpp
  camera_pose.cpp
  camera_properties.cpp
  axis_aligned_ellipse.cpp
  distortion.cpp
  camera_reader.cpp
  camera_properties_reader.cpp
  camera_pose_reader.cpp
  matrix_reader.cpp
  world_point_reader.cpp
  match_result_reader.cpp
  sift_feature_reader.cpp
  descriptor_reader.cpp
  sift_position_reader.cpp
  sift_feature_writer.cpp
  descriptor_writer.cpp
  sift_position_writer.cpp
  find_smooth_trajectory.cpp)
TARGET_LINK_LIBRARIES(agglomerative-cluster glog gflags)
TARGET_LINK_LIBRARIES(agglomerative-cluster ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(agglomerative-cluster ceres)
TARGET_LINK_LIBRARIES(agglomerative-cluster cxsparse)
TARGET_LINK_LIBRARIES(agglomerative-cluster cholmod ccolamd camd colamd amd)
TARGET_LINK_LIBRARIES(agglomerative-cluster ${LAPACK_LIB})

ADD_EXECUTABLE(feature-sets-unittest
  feature_sets_unittest.cpp
  feature_index.cpp
  image_index.cpp)
TARGET_LINK_LIBRARIES(feature-sets-unittest gtest_main gtest gflags glog)
TARGET_LINK_LIBRARIES(feature-sets-unittest ${OpenCV_LIBS})

ADD_EXECUTABLE(train-appearance-classifiers
  train_appearance_classifiers.cpp
  descriptor.cpp
  classifier.cpp
  descriptor_reader.cpp
  classifier_writer.cpp)
TARGET_LINK_LIBRARIES(train-appearance-classifiers glog gflags)
TARGET_LINK_LIBRARIES(train-appearance-classifiers ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(train-appearance-classifiers linear blas)

ADD_EXECUTABLE(match-features-using-classifiers
  match_features_using_classifiers.cpp
  descriptor.cpp
  classifier.cpp
  find_unique_matches.cpp
  find_matches.cpp
  find_matches_util.cpp
  match.cpp
  match_result.cpp
  unique_match_result.cpp
  descriptor_reader.cpp
  classifier_reader.cpp
  match_result_writer.cpp
  unique_match_result_writer.cpp)
TARGET_LINK_LIBRARIES(match-features-using-classifiers glog gflags)
TARGET_LINK_LIBRARIES(match-features-using-classifiers ${OpenCV_LIBS})

ADD_EXECUTABLE(static-camera-to-moving
  static_cameras_to_moving.cpp
  camera.cpp
  camera_properties.cpp
  axis_aligned_ellipse.cpp
  distortion.cpp
  camera_pose.cpp
  camera_writer.cpp
  camera_properties_writer.cpp
  camera_pose_writer.cpp
  world_point_writer.cpp
  world_point_reader.cpp
  matrix_reader.cpp
  matrix_writer.cpp
  camera_properties_reader.cpp
  camera_pose_reader.cpp)
TARGET_LINK_LIBRARIES(static-camera-to-moving glog gflags)
TARGET_LINK_LIBRARIES(static-camera-to-moving ${OpenCV_LIBS})

ADD_EXECUTABLE(combine-matches
  combine_matches.cpp
  match.cpp
  match_result.cpp
  match_reader.cpp
  match_result_reader.cpp
  match_writer.cpp
  match_result_writer.cpp)
TARGET_LINK_LIBRARIES(combine-matches glog gflags)
TARGET_LINK_LIBRARIES(combine-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(filter-matches
  filter_matches.cpp
  match.cpp
  match_result.cpp
  unique_match_result.cpp
  match_result_reader.cpp
  unique_match_result_reader.cpp
  match_result_writer.cpp)
TARGET_LINK_LIBRARIES(filter-matches glog gflags)
TARGET_LINK_LIBRARIES(filter-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(display-multiview-multitracks
  display_multiview_multitracks.cpp
  image_index.cpp
  random_color.cpp
  hsv.cpp
  sift_position.cpp
  draw_sift_position.cpp
  read_lines.cpp
  sift_position_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(display-multiview-multitracks glog gflags)
TARGET_LINK_LIBRARIES(display-multiview-multitracks ${OpenCV_LIBS})

ADD_EXECUTABLE(display-distorted-epipolar-line
  display_distorted_epipolar_line.cpp
  distortion.cpp
  distorted_epipolar_lines.cpp
  sift_position.cpp
  camera_properties.cpp
  axis_aligned_ellipse.cpp
  distortion.cpp
  sift_position_reader.cpp
  camera_properties_reader.cpp
  matrix_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(display-distorted-epipolar-line glog gflags)
TARGET_LINK_LIBRARIES(display-distorted-epipolar-line ${OpenCV_LIBS})

ADD_EXECUTABLE(extract-multiview-examples
  extract_multiview_examples.cpp
  distortion.cpp
  distorted_epipolar_lines.cpp
  sift_feature.cpp
  sift_position.cpp
  descriptor.cpp
  camera_properties.cpp
  axis_aligned_ellipse.cpp
  distortion.cpp
  extract_sift.cpp
  sift_feature_reader.cpp
  sift_position_reader.cpp
  descriptor_reader.cpp
  camera_properties_reader.cpp
  matrix_reader.cpp
  read_lines.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(extract-multiview-examples glog gflags)
TARGET_LINK_LIBRARIES(extract-multiview-examples ${OpenCV_LIBS})

ADD_EXECUTABLE(offline-classifier-tracking
  offline_classifier_tracking.cpp
  viterbi.cpp
  image_file_sequence.cpp
  admm_tracking.cpp
  dynamic_program_tracker.cpp
  dynamic_program_occlusion_tracker.cpp
  util.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(offline-classifier-tracking glog gflags)
TARGET_LINK_LIBRARIES(offline-classifier-tracking ${OpenCV_LIBS})

ADD_EXECUTABLE(viterbi-unittest
  viterbi_unittest.cpp
  viterbi.cpp)
TARGET_LINK_LIBRARIES(viterbi-unittest gtest_main gtest gflags glog)
TARGET_LINK_LIBRARIES(viterbi-unittest ${OpenCV_LIBS})

ADD_EXECUTABLE(display-admm-tracking
  display_admm_tracking.cpp
  viterbi.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(display-admm-tracking glog gflags)
TARGET_LINK_LIBRARIES(display-admm-tracking ${OpenCV_LIBS})

ADD_EXECUTABLE(choose-keypoints
  choose_keypoints.cpp
  sift_position.cpp
  draw_sift_position.cpp
  read_image.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(choose-keypoints glog gflags)
TARGET_LINK_LIBRARIES(choose-keypoints ${OpenCV_LIBS})

ADD_EXECUTABLE(select-keypoint-subset
  select_keypoint_subset.cpp
  sift_position.cpp
  sift_position_reader.cpp
  sift_position_writer.cpp)
TARGET_LINK_LIBRARIES(select-keypoint-subset glog gflags)
TARGET_LINK_LIBRARIES(select-keypoint-subset ${OpenCV_LIBS})

ADD_EXECUTABLE(restrict-tracks-to-box
  restrict_tracks_to_box.cpp
  scale_space_position.cpp
  scale_space_feature_drawer.cpp
  random_color.cpp
  read_image.cpp
  scale_space_position_reader.cpp
  scale_space_position_writer.cpp)
TARGET_LINK_LIBRARIES(restrict-tracks-to-box glog gflags)
TARGET_LINK_LIBRARIES(restrict-tracks-to-box ${OpenCV_LIBS})

ADD_EXECUTABLE(choose-points
  choose_points.cpp
  match.cpp
  random_color.cpp
  read_image.cpp
  read_lines.cpp
  match_writer.cpp)
TARGET_LINK_LIBRARIES(choose-points glog gflags)
TARGET_LINK_LIBRARIES(choose-points ${OpenCV_LIBS})

ADD_EXECUTABLE(manually-filter-tracks
  manually_filter_tracks.cpp
  scale_space_position.cpp
  scale_space_feature_drawer.cpp
  random_color.cpp
  read_image.cpp
  scale_space_position_reader.cpp
  scale_space_position_writer.cpp)
TARGET_LINK_LIBRARIES(manually-filter-tracks glog gflags)
TARGET_LINK_LIBRARIES(manually-filter-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(merge-forward-and-reverse-tracks
  merge_forward_and_reverse_tracks.cpp
  scale_space_position.cpp
  scale_space_position_reader.cpp
  scale_space_position_writer.cpp)
TARGET_LINK_LIBRARIES(merge-forward-and-reverse-tracks glog gflags)
TARGET_LINK_LIBRARIES(merge-forward-and-reverse-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(track-live
  track_live.cpp
  flow.cpp
  warp.cpp
  util.cpp
  translation_warp.cpp
  translation_warper.cpp
  similarity_warp.cpp
  similarity_warper.cpp)
TARGET_LINK_LIBRARIES(track-live glog gflags)
TARGET_LINK_LIBRARIES(track-live ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(track-live ceres)
TARGET_LINK_LIBRARIES(track-live cxsparse)
TARGET_LINK_LIBRARIES(track-live cholmod ccolamd camd colamd amd)
TARGET_LINK_LIBRARIES(track-live ${LAPACK_LIB})

ADD_EXECUTABLE(find-multiview-track
  find_multiview_track.cpp
  quantize_ray.cpp
  viterbi.cpp
  camera.cpp
  camera_properties.cpp
  axis_aligned_ellipse.cpp
  camera_pose.cpp
  distortion.cpp
  read_lines.cpp
  matrix_reader.cpp
  camera_properties_reader.cpp
  camera_pose_reader.cpp
  world_point_reader.cpp)
TARGET_LINK_LIBRARIES(find-multiview-track glog gflags)
TARGET_LINK_LIBRARIES(find-multiview-track ${OpenCV_LIBS})

ADD_EXECUTABLE(display-distorted-epipolar-line-segments
  display_distorted_epipolar_line_segments.cpp
  quantize_ray.cpp
  distortion.cpp
  camera.cpp
  camera_properties.cpp
  axis_aligned_ellipse.cpp
  camera_pose.cpp
  distortion.cpp
  camera_properties_reader.cpp
  camera_pose_reader.cpp
  matrix_reader.cpp
  world_point_reader.cpp
  read_lines.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(display-distorted-epipolar-line-segments glog gflags)
TARGET_LINK_LIBRARIES(display-distorted-epipolar-line-segments ${OpenCV_LIBS})

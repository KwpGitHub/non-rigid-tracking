set(CMAKE_CXX_FLAGS "-Wall")

ADD_EXECUTABLE(visualize-keypoints
  visualize_keypoints.cpp
  read_image.cpp
  similarity_feature.cpp
  similarity_feature_reader.cpp
  draw_similarity_feature.cpp
  random_color.cpp)
TARGET_LINK_LIBRARIES(visualize-keypoints glog gflags)
TARGET_LINK_LIBRARIES(visualize-keypoints ${OpenCV_LIBS})

ADD_EXECUTABLE(match-features
  match_features.cpp
  descriptor.cpp
  find_matches.cpp
  descriptor_reader.cpp
  match_result_writer.cpp)
TARGET_LINK_LIBRARIES(match-features glog gflags)
TARGET_LINK_LIBRARIES(match-features ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-matches
  visualize_matches.cpp
  read_image.cpp
  draw_matches.cpp
  similarity_feature.cpp
  random_color.cpp
  match_reader.cpp
  draw_similarity_feature.cpp
  similarity_feature_reader.cpp)
TARGET_LINK_LIBRARIES(visualize-matches glog gflags)
TARGET_LINK_LIBRARIES(visualize-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(adjacent-matches-to-tracks
  adjacent_matches_to_tracks.cpp
  read_image.cpp
  match_reader.cpp
  similarity_feature.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp)
TARGET_LINK_LIBRARIES(adjacent-matches-to-tracks glog gflags)
TARGET_LINK_LIBRARIES(adjacent-matches-to-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(track-features-bidir
  track_features_bidir.cpp
  read_image.cpp
  flow.cpp
  warp.cpp
  util.cpp
  similarity_warp.cpp
  similarity_feature.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp
  random_color.cpp)
TARGET_LINK_LIBRARIES(track-features-bidir glog gflags)
TARGET_LINK_LIBRARIES(track-features-bidir ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(track-features-bidir ceres)
TARGET_LINK_LIBRARIES(track-features-bidir cxsparse)
TARGET_LINK_LIBRARIES(track-features-bidir cholmod ccolamd camd colamd amd)
TARGET_LINK_LIBRARIES(track-features-bidir ${LAPACK_LIB})

ADD_EXECUTABLE(extract-sift-tracks
  extract_sift_tracks.cpp
  read_image.cpp
  similarity_feature.cpp
  sift.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp
  descriptor_writer.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(extract-sift-tracks glog gflags)
TARGET_LINK_LIBRARIES(extract-sift-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(test-extract-sift
  test_extract_sift.cpp
  read_image.cpp
  similarity_feature.cpp
  sift.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(test-extract-sift glog gflags)
TARGET_LINK_LIBRARIES(test-extract-sift ${OpenCV_LIBS})

ADD_EXECUTABLE(pca-descriptor
  pca_descriptor.cpp
  random_color.cpp
  descriptor_reader.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(pca-descriptor glog gflags)
TARGET_LINK_LIBRARIES(pca-descriptor ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-tracks
  visualize_tracks.cpp
  similarity_feature.cpp
  draw_similarity_feature.cpp
  read_image.cpp
  random_color.cpp
  similarity_feature_reader.cpp)
TARGET_LINK_LIBRARIES(visualize-tracks glog gflags)
TARGET_LINK_LIBRARIES(visualize-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(merge-tracks
  merge_tracks.cpp
  similarity_feature.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp)
TARGET_LINK_LIBRARIES(merge-tracks glog gflags)
TARGET_LINK_LIBRARIES(merge-tracks ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(merge-tracks ceres)
TARGET_LINK_LIBRARIES(merge-tracks cxsparse)
TARGET_LINK_LIBRARIES(merge-tracks cholmod ccolamd camd colamd amd)
TARGET_LINK_LIBRARIES(merge-tracks ${LAPACK_LIB})

ADD_EXECUTABLE(select-active-tracks
  select_active_tracks.cpp
  similarity_feature.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp)
TARGET_LINK_LIBRARIES(select-active-tracks glog gflags)
TARGET_LINK_LIBRARIES(select-active-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(effect-of-sift-threshold
  effect_of_sift_threshold.cpp
  descriptor_reader.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(effect-of-sift-threshold glog gflags)
TARGET_LINK_LIBRARIES(effect-of-sift-threshold ${OpenCV_LIBS})

ADD_EXECUTABLE(find-keypoints-and-extract-descriptors
  find_keypoints_and_extract_descriptors.cpp
  read_image.cpp
  similarity_feature.cpp
  sift.cpp
  similarity_feature_writer.cpp
  descriptor_writer.cpp
  descriptor.cpp)
TARGET_LINK_LIBRARIES(find-keypoints-and-extract-descriptors glog gflags)
TARGET_LINK_LIBRARIES(find-keypoints-and-extract-descriptors ${OpenCV_LIBS})

ADD_EXECUTABLE(optimal-triangulation-test
    optimal_triangulation_test.cpp
    optimal_triangulation.cpp
    roots.cpp
    geometry.cpp)
TARGET_LINK_LIBRARIES(optimal-triangulation-test glog gflags)
TARGET_LINK_LIBRARIES(optimal-triangulation-test ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(optimal-triangulation-test gsl ${LAPACK_LIB})

ADD_EXECUTABLE(evaluate-matches
    evaluate_matches.cpp
    match_reader.cpp
    matrix_reader.cpp
    image_point_reader.cpp
    optimal_triangulation.cpp
    roots.cpp)
TARGET_LINK_LIBRARIES(evaluate-matches glog gflags)
TARGET_LINK_LIBRARIES(evaluate-matches ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(evaluate-matches gsl ${LAPACK_LIB})

ADD_EXECUTABLE(undistort-image
    undistort_image.cpp
    camera_properties.cpp
    camera_properties_reader.cpp
    distortion.cpp
    read_image.cpp)
TARGET_LINK_LIBRARIES(undistort-image glog gflags)
TARGET_LINK_LIBRARIES(undistort-image ${OpenCV_LIBS})

ADD_EXECUTABLE(undistort-points
    undistort_points.cpp
    image_point_reader.cpp
    image_point_writer.cpp
    camera_properties.cpp
    camera_properties_reader.cpp
    distortion.cpp)
TARGET_LINK_LIBRARIES(undistort-points glog gflags)
TARGET_LINK_LIBRARIES(undistort-points ${OpenCV_LIBS})

ADD_EXECUTABLE(cameras-to-fund-mat
    cameras_to_fund_mat.cpp
    camera_pose.cpp
    camera_pose_reader.cpp
    world_point_reader.cpp
    camera_properties.cpp
    camera_properties_reader.cpp
    geometry.cpp
    matrix_writer.cpp)
TARGET_LINK_LIBRARIES(cameras-to-fund-mat glog gflags)
TARGET_LINK_LIBRARIES(cameras-to-fund-mat ${OpenCV_LIBS})

ADD_EXECUTABLE(effect-of-matching-parameters
  effect_of_matching_parameters.cpp
  read_lines.cpp
  stats.cpp)
TARGET_LINK_LIBRARIES(effect-of-matching-parameters glog gflags)
TARGET_LINK_LIBRARIES(effect-of-matching-parameters ${OpenCV_LIBS})

ADD_EXECUTABLE(select-long-tracks
  select_long_tracks.cpp
  similarity_feature.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp)
TARGET_LINK_LIBRARIES(select-long-tracks glog gflags)
TARGET_LINK_LIBRARIES(select-long-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(match-tracks-using-mean
  match_tracks_using_mean.cpp
  descriptor.cpp
  find_matches.cpp
  descriptor_reader.cpp
  match_result_writer.cpp)
TARGET_LINK_LIBRARIES(match-tracks-using-mean glog gflags)
TARGET_LINK_LIBRARIES(match-tracks-using-mean ${OpenCV_LIBS})

ADD_EXECUTABLE(exhaustive-matches-to-multiview-tracks
  exhaustive_matches_to_multiview_tracks.cpp
  read_lines.cpp
  sift_feature.cpp
  similarity_feature.cpp
  descriptor.cpp
  multiview_track.cpp
  match_reader.cpp
  sift_feature_reader.cpp
  descriptor_reader.cpp
  similarity_feature_reader.cpp
  sift_feature_writer.cpp
  descriptor_writer.cpp
  similarity_feature_writer.cpp)
TARGET_LINK_LIBRARIES(exhaustive-matches-to-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(exhaustive-matches-to-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(visualize-multiview-tracks
  visualize_multiview_tracks.cpp
  read_lines.cpp
  multiview_track.cpp
  random_color.cpp
  similarity_feature.cpp
  draw_similarity_feature.cpp
  similarity_feature_reader.cpp
  read_image.cpp)
TARGET_LINK_LIBRARIES(visualize-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(visualize-multiview-tracks ${OpenCV_LIBS})

ADD_EXECUTABLE(select-distinctive-matches
  select_distinctive_matches.cpp
  match_result_reader.cpp
  match_result_writer.cpp)
TARGET_LINK_LIBRARIES(select-distinctive-matches glog gflags)
TARGET_LINK_LIBRARIES(select-distinctive-matches ${OpenCV_LIBS})

ADD_EXECUTABLE(track-matches-to-multiview-tracks
  track_matches_to_multiview_tracks.cpp
  similarity_feature.cpp
  multiview_track.cpp
  match_result_reader.cpp
  similarity_feature_reader.cpp
  similarity_feature_writer.cpp)
TARGET_LINK_LIBRARIES(track-matches-to-multiview-tracks glog gflags)
TARGET_LINK_LIBRARIES(track-matches-to-multiview-tracks ${OpenCV_LIBS})
